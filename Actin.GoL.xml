<?xml version='1.0' encoding='UTF-8'?>
<MorpheusModel version="4">
    <Description>
        <Details></Details>
        <Title></Title>
    </Description>
    <Space>
        <Lattice class="hexagonal">
            <Neighborhood>
                <Order>1</Order>
            </Neighborhood>
            <Size symbol="size" value="100, 100, 0"/>
            <BoundaryConditions>
                <Condition boundary="x" type="periodic"/>
                <Condition boundary="y" type="periodic"/>
            </BoundaryConditions>
        </Lattice>
        <SpaceSymbol symbol="space"/>
    </Space>
    <Time>
        <StartTime value="0"/>
        <StopTime value="50"/>
        <TimeSymbol symbol="time"/>
        <SaveInterval value="0"/>
    </Time>
    <CellTypes>
        <CellType class="biological" name="actin">
            <Property symbol="f" value="0.0" name="filament"/>
            <Property symbol="sum" value="0.0" name="sum_neighbours"/>
            <Property symbol="t" value="0.0" name="tip"/>
            <Property symbol="b" value="0.0" name="binding_&quot;filaments&quot;"/>
            <Property symbol="m2" value="0.0"/>
            <Property symbol="g" value="0.0" name="growing_filament"/>
            <NeighborhoodReporter>
                <Input scaling="cell" value="f"/>
                <Output symbol-ref="sum" mapping="sum"/>
            </NeighborhoodReporter>
            <NeighborhoodReporter>
                <Input scaling="cell" value="f"/>
                <Output symbol-ref="m2" mapping="sum"/>
            </NeighborhoodReporter>
            <System solver="heun" time-step="1.0">
                <Rule symbol-ref="f">
                    <Expression>if((f==0 and sum==1 and time &lt; 2), 1, f)
  </Expression>
                </Rule>
                <Rule symbol-ref="t">
                    <Expression>if(f==1 and sum==0, 1, t)</Expression>
                </Rule>
                <Rule symbol-ref="b">
                    <Expression>if((f==1 and sum==1 and time &lt; 2), 1, b)</Expression>
                </Rule>
                <Rule symbol-ref="m2">
                    <Expression>if((f==2), 1, m2)</Expression>
                </Rule>
                <Rule symbol-ref="g">
                    <Expression>if((f==1 and sum==1), 1, g)</Expression>
                </Rule>
            </System>
            <!--    <Disabled>
        <FlipCellMotion neighborhood="2" time-step="0.1">
            <Condition>b==0</Condition>
        </FlipCellMotion>
    </Disabled>
-->
        </CellType>
    </CellTypes>
    <Global>
        <Constant symbol="f" value="0.0"/>
        <Constant symbol="t" value="0.0"/>
        <Constant symbol="x" value="0.0"/>
    </Global>
    <CellPopulations>
        <Population size="0" type="actin">
            <InitProperty symbol-ref="f">
                <Expression>if(rand_uni(0,1) > 0.95, 1, 0) </Expression>
            </InitProperty>
            <InitCircle mode="random" number-of-cells="100">
                <Dimensions radius="30.0" center="50.0, 50.0, 50.0"/>
            </InitCircle>
            <InitCellLattice/>
        </Population>
    </CellPopulations>
    <Analysis>
        <Gnuplotter>
            <!--    <Disabled>
        <Plot>
            <Cells value="f">
                <ColorMap>
                    <Color value="0" color="light-turquoise"/>
                    <Color value="1" color="dark-salmon"/>
                </ColorMap>
            </Cells>
        </Plot>
    </Disabled>
-->
            <Terminal name="png"/>
            <Plot>
                <Cells value="b">
                    <ColorMap>
                        <Color value="0" color="skyblue"/>
                        <Color value="1" color="red"/>
                    </ColorMap>
                </Cells>
            </Plot>
            <Plot>
                <Cells value="g">
                    <ColorMap>
                        <Color value="0" color="white"/>
                        <Color value="1" color="red"/>
                    </ColorMap>
                </Cells>
            </Plot>
        </Gnuplotter>
    </Analysis>
</MorpheusModel>
